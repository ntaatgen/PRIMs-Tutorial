decaystandard <- function(x,t) {#
val <- 0#
for i in x {#
val <- val + log(t-i)^-0.5#
}#
return( val)#
}#
plot(1:100,log(decaystandard(c(-1,-2),1:100)),type="l")
log(decaystandard(c(-1,-2),1:100))
decaystandard <- function(x,t) {#
val <- 0#
for i in x {#
val <- val + (t-i)^-0.5#
}#
return( val)#
}#
plot(1:100,log(decaystandard(c(-1,-2),1:100)),type="l")
log(decaystandard(c(-1,-2),1:100))
decay(standard(c(-1,-2),1:100))
decaystandard(c(-1,-2),1:100)
decaystandard <- function(x,t) {#
val <- t * 0#
for i in x {#
val <- val + (t-i)^-0.5#
}#
return( val)#
}
plot(1:100,log(decaystandard(c(-1,-2),1:100)),type="l")
decaystandard(c(-1,-2),1:100)
(1:100)*0
val <- val + (1:100 - (-1))^-0.5
(1:100 - (-1))^-0.5
decaystandard <- function(x,t) {#
val <- t * 0#
for i in x {#
val <- val + (t-i)^-0.5#
}#
return( val)#
}
decaystandard <- function(x,t) {#
val <- t * 0#
for (i in x) {#
val <- val + (t-i)^-0.5#
}#
return( val)#
}
plot(1:100,log(decaystandard(c(-1,-2),1:100)),type="l")
newdecay <- function(x,t) {#
avg <- mean(x)#
stdev <- sd(x)#
return ( stdev / (t - avg))#
}
plot(1:100,log(newdecay(c(-1,-2),1:100)),type="l")
plot(1:100,log(decaystandard(c(-1,-2),1:100)),type="l")#
#
lines(1:100,log(newdecay(c(-1,-2),1:100)),type="l")
length(1:10)
newdecay <- function(x,t) {#
avg <- mean(x)#
stdev <- sd(x)#
return ( stdev / (t - avg)*length(x))#
}#
#
plot(1:100,log(decaystandard(c(-1,-2),1:100)),type="l")#
#
lines(1:100,log(newdecay(c(-1,-2),1:100)),type="l")
plot(1:100,log(decaystandard(c(-1,-2),1:100)),type="l",ylim=c(-5,1))#
#
lines(1:100,log(newdecay(c(-1,-2),1:100)),type="l")
lines(1:100,log(2*newdecay(c(-1,-2),1:100)),type="l")
lines(1:100,log(4*newdecay(c(-1,-2),1:100)),type="l")
lines(1:100,log(6*newdecay(c(-1,-2),1:100)),type="l")
plot(1:100,log(decaystandard(c(-1,-2),1:100)),type="l",ylim=c(-5,1))#
#
lines(1:100,log(newdecay(c(-1,-2),1:100)),type="l")
plot(1:100,log(decaystandard(c(-10000,-2),1:100)),type="l",ylim=c(-5,1))#
#
lines(1:100,log(newdecay(c(-10000,-2),1:100)),type="l")
plot(1:100,log(decaystandard(c(-10000,-2),1:100)),type="l",ylim=c(-5,1))#
#
lines(1:100,log(newdecay(c(-10000,-2),1:100)),type="l",lty=2)
plot(1:100,log(decaystandard(c(-100,-2),1:100)),type="l",ylim=c(-5,1))#
#
lines(1:100,log(newdecay(c(-100,-2),1:100)),type="l",lty=2)
plot(1:100,log(decaystandard(c(-10,-2),1:100)),type="l",ylim=c(-5,1))#
#
lines(1:100,log(newdecay(c(-10,-2),1:100)),type="l",lty=2)
plot(1:100,log(decaystandard(c(-100,-10,-2),1:100)),type="l",ylim=c(-5,1))#
#
lines(1:100,log(newdecay(c(-100,-10,-2),1:100)),type="l",lty=2)
newdecay <- function(x,t) {#
avg <- mean(x)#
stdev <- sd(x)#
dens <- length(x) / (max(x) - min(x))#
return ( stdev / (t - avg)*dens)#
}#
#
plot(1:100,log(decaystandard(c(-100,-10,-2),1:100)),type="l",ylim=c(-5,1))#
#
lines(1:100,log(newdecay(c(-100,-10,-2),1:100)),type="l",lty=2)
newdecay <- function(x,t) {#
avg <- mean(x) #
stdev <- sd(x) * 10#
dens <- length(x) / (max(x) - min(x))#
return ( stdev / (t - avg)*dens)#
}#
#
plot(1:100,log(decaystandard(c(-100,-10,-2),1:100)),type="l",ylim=c(-5,1))#
#
lines(1:100,log(newdecay(c(-100,-10,-2),1:100)),type="l",lty=2)
plot(1:100,log(decaystandard(c(-10,-2),1:100)),type="l",ylim=c(-5,1))#
#
lines(1:100,log(newdecay(c(-10,-2),1:100)),type="l",lty=2)
plot(1:100,log(decaystandard(c(-1000,-10,-2),1:100)),type="l",ylim=c(-5,1))#
#
lines(1:100,log(newdecay(c(-1000,-10,-2),1:100)),type="l",lty=2)
lines(1:100,log(newdecay(c(-1000),1:100)),type="l",lty=2)
lines(1:100,log(newdecay(c(-1000,-900),1:100)),type="l",lty=2)
lines(1:100,log(newdecay(c(-1000,-900,-1),1:100)),type="l",lty=2)
30^0.99
## the edited version of the pool model for cognitive modeling course 2016-2017. #
## The model used the Declerative memory and time perception components from ACT_R model and other parameter from the Pool model by Taatgen and van Rijn (2011). #
## The final assignments_ model is simulateing the experimental data in a time estimation task. #
#
library(data.table)#
library(lme4)#
## Noise function and other basic functions#
#
actr.noise <- function(s,n=1){ #
  rand <- runif(n,min=.001,max=.999)#
  s * log((1 - rand ) / rand) }#
#
seconds_to_pulses = function(seconds,a=1.1,b=0.015,tn=11,unit=0) {#
  nrofPulses = 0 # create variables#
  pulseLTemp = NULL # ...#
  pulseL = NULL     # ...#
  seconds = seconds * (1 + 999*unit) #
  while (sum(pulseL) < seconds) { # as longs as the sum of the pulses is shorter than the length of the specified interval, the loop will continue#
    pulseLTemp = a * tn + actr.noise(a*b*tn) # stores value of current pulselength into this variable#
    pulseL <- c(pulseL, pulseLTemp) # combines current pulse length with existing pulse lenghts in one vector#
    tn = pulseLTemp # length of previous(tn) and current(pulseTemp) pulse#
    nrofPulses = nrofPulses + 1 # counts number of pulses needed to fill the interval#
  }#
  assign('nrofPulses',nrofPulses, .GlobalEnv ) # Saves into global environment#
  assign('pulseL',pulseL, .GlobalEnv)#
  return(nrofPulses)#
}#
#
pulses_to_seconds = function(nrPulses,a=1.1,b=0.015,tn=11,unit=0) {#
  pulseL = NULL # define pulseL#
  for (i in 1:nrPulses) { # Loop through number of assigned pulses#
    pulseL[i] <- a * tn +actr.noise(a*b*tn) # assigns the length of the pulse to the i'th value of pulseL#
    tn = pulseL[i] # degines tn as the length of the current pulse. Which is used again for the next loop#
  }#
  IntervalLength = sum(pulseL)/(1+unit*999) # Uses either miliseconds or seconds, depending on unit (0=ms; 1=sec)#
  assign('IntervalLength', IntervalLength, .GlobalEnv) # saves variable in global environment#
  return(IntervalLength)#
}#
#
## Function to create DM and add row for a chunk if necessary#
add.encounter <- function(chunk,time,tempDM) {#
  if(!is.array(tempDM)){#
    tempDM <- array(NA,c(1,DMsettings$max.num.encounters))#
    rownames(tempDM)[1] <- chunk#
  } else {#
    chunkNames <- row.names(tempDM)#
    if(!(chunk %in% chunkNames)){#
      tempDM <- rbind(tempDM,rep(NA,DMsettings$max.num.encounters))#
      row.names(tempDM)[nrow(tempDM)] <- chunk#
    }#
  }#
  tmp <- tempDM[chunk,]#
  tempDM[chunk,sum(!is.na(tmp))+1] <- time#
  return(tempDM)#
}#
#
get.encounters <- function(DM,chunk) {#
  tmp <- DM[chunk,]#
  tmp[!is.na(tmp)]#
}#
#
actr.B <- function(encounters,curtime) {#
  if (length(curtime)>1) {#
    sapply(curtime,function(X) { actr.B(encounters,X)})#
  } else {#
    if (curtime < min(encounters)) {#
      return(NA)#
    } else {#
      log(sum((curtime - encounters[encounters<curtime])^-DMsettings$d))  #
    }#
  }#
}#
#
DMsettings = list(max.num.encounters=200,d=.5,TbetweenPracExp=2,nrofPracTrials=5,nrofBlocks=4,punishments=c(0,-5,-30,0),perc.Feedback=c(1.8,1.8,1.8,1.8),instructions=c(1.8,1.8+round(log(5),digits=1),round(1.8+log(30),digits=1),1.8)) #
#
## Training session befor doing the experiment, traning session contains 500 trials#
Learntrial = function(n) {#
  curTime = 0#
#
  for (i in 1:n) {#
    curTime = curTime + .3 # Fixation before yellow dot#
    Ts = .750#
    curTime = curTime + Ts # Duration of interval#
    Tm = seconds_to_pulses(Ts*1000)  # Convert the presented interval into pulses#
    DMpulses = add.encounter(as.character(round(Tm)),curTime,DMpulses) # Store the pulses of the presented interval in DM, at the time that the presentation was done#
    curTime = curTime + .3#
  }#
  assign("curTime",curTime,.GlobalEnv)#
  #print(DMpulses)#
  return(DMpulses)#
}#
#
totalRickall = function(DMpulses,DMfeedback) {#
  # DM Pulses#
  activationsPulses = matrix(NA,nrow=nrow(DMpulses),ncol=1) # Create empty matrix to store the activations of the chunks in#
  rownames(activationsPulses) = rownames(DMpulses) # Set the rownames of the matrix to the correct names#
  for (i in 1:nrow(DMpulses)){ # Loop through the chunks to get the current activation of all the chunks#
    activationsPulses[i,] = exp(1)^(actr.B(get.encounters(DMpulses,i),curTime)) # The activation is calculated 200ms after presentation#
  }#
  A = as.data.table(activationsPulses)#
  A = cbind(A,as.numeric(rownames(DMpulses)))#
  A[, Prob := (A[,]$V1/.2)/sum((A$V1)/.2)] # Calculate the probability of retrieval for every chunk#
  A[, Product := A[,]$V2 * A[,]$Prob] # Calculate the product of the probability and the value of every chunk#
  retrPulse = sum(A$Product)#
  #print(A)#
  # DM Feedback#
  activationsFeedback = matrix(NA,nrow=nrow(DMfeedback),ncol=1) # Create empty matrix to store the activations of the chunks in#
  rownames(activationsFeedback) = rownames(DMfeedback) # Set the rownames of the matrix to the correct names#
  for (i in 1:nrow(DMfeedback)){ # Loop through the chunks to get the current activation of all the chunks#
    activationsFeedback[i,] = exp(1)^(actr.B(get.encounters(DMfeedback,i),curTime))#
    }#
  B = as.data.table(activationsFeedback)#
  B = cbind(B,as.numeric(rownames(DMfeedback)))#
  B[, Prob := (B[,]$V1/.2)/sum((B$V1)/.2)] # Calculate the probability of retrieval for every chunk#
  B[, Product := B[,]$V2 * B[,]$Prob] # Calculate the product of the probability and the value of every chunk#
  retrFB = sum(B$Product)#
#
  Te = sum(A$Product,B$Product) # Te is the sum of all products#
  listPuFBTe = list(retrPulse,retrFB,Te)#
  return(listPuFBTe)#
}#
#
Feedback = function(listPuFBTe,curBlock,feedbacks,lossAversion,b) {#
  # Add recalled Te as encounter to DMpulses#
  Tp = pulses_to_seconds(listPuFBTe[[3]],b=b)#
  curTime = curTime + Tp/1000 # curTime after produced interval by subject#
  # Add received feedback as encounter to DMfeedback#
  feedback = ifelse(Tp < 750*0.85,"1.8",ifelse(Tp > 750*1.15,"-1.8",0))#
  score = ifelse(Tp < 750*0.85,DMsettings$punishments[curBlock],ifelse(Tp > 750*1.15,0,5))#
  if(!feedback == 0) {#
  DMfeedback = add.encounter(feedback,curTime,DMfeedback)#
    if(score < -1) {#
    DMfeedback = add.encounter(as.character(round(lossAversion[curBlock],digits=2)),curTime,DMfeedback)#
    assign("DMfeedback",DMfeedback,.GlobalEnv)#
    }#
  assign("DMfeedback",DMfeedback,.GlobalEnv)#
  }#
  assign("curTime",curTime,.GlobalEnv)#
  listTpfeedbackscoreDMs = list(Tp,feedback,score,DMpulses,DMfeedback)#
  return(listTpfeedbackscoreDMs) # return DMs too#
}#
#
indDifferences = function() {#
  percFeedback = c(1.8,1.8,1.8,1.8)#
  lossAversion = NULL#
  estImprecision = NULL#
  lossAversionpers = round(rnorm(1,4.5,.5))#
  percFeedback[2:3] = percFeedback[2:3]#
  lossAversion = c(0,round(log(abs(DMsettings$punishments[2:3]))*lossAversionpers,digits=1),0)#
  indDifferencesList = list(lossAversion,percFeedback,lossAversionpers)#
  return(indDifferencesList)#
}#
#
## Runs Training and the Exptrial for one subject#
runOneSubj = function(n,curSubj,DMsettings) {#
  DMpulses = NULL#
  DMfeedback = NULL#
  assign("DMpulses",DMpulses,.GlobalEnv)#
  assign("DMfeedback",DMfeedback,.GlobalEnv)#
  dataOneSubj = matrix(NA,nrow=n*DMsettings$nrofBlocks,ncol=11)#
  DMpulses = Learntrial(DMsettings$nrofPracTrials)#
  assign('DMpulses',DMpulses,.GlobalEnv)#
  curTime = curTime + DMsettings$TbetweenPracExp#
  assign("curTime",curTime,.GlobalEnv)#
  indDifferencesList = indDifferences()#
  b = rnorm(1,0.025,0.008)#
  for(curBlock in 1:DMsettings$nrofBlocks) {#
#
    for (curTrial in 1:n) {#
      if(curTrial == 1){ #
        DMfeedback = add.encounter(as.character(DMsettings$instructions[curBlock]),curTime,DMfeedback)#
        DMfeedback = add.encounter("-1.8",curTime,DMfeedback)#
        assign('DMfeedback',DMfeedback,.GlobalEnv)#
      }#
      curTime = curTime + runif(1,min=1,max=2) # Duration of fixation before start of trial#
      # Maybe fun to add the duration of this as an encounter too?? #
      assign("curTime",curTime,.GlobalEnv)#
      curRow = curTrial + n*(curBlock-1)#
      listPuFBTe = totalRickall(DMpulses,DMfeedback)#
      listTpfeedbackscoreDMs = Feedback(listPuFBTe,curBlock,indDifferencesList[[2]],indDifferencesList[[1]],b)#
      dataOneSubj[curRow,1] = round(listTpfeedbackscoreDMs[[1]]) # Tp of current trial#
      dataOneSubj[curRow,2] = as.numeric(listTpfeedbackscoreDMs[[2]]) # Perceived feedback#
      dataOneSubj[curRow,3] = listTpfeedbackscoreDMs[[3]] # Points received on current trial#
      dataOneSubj[curRow,4] = curBlock # Current Block#
      dataOneSubj[curRow,5] = curSubj # Subject nr#
      dataOneSubj[curRow,6] = curTime # curTime#
      dataOneSubj[curRow,7] = curRow # Trialnr#
      dataOneSubj[curRow,8] = indDifferencesList[[3]] # Loss Aversion#
      dataOneSubj[curRow,9] = ifelse(as.numeric(listTpfeedbackscoreDMs[[2]]) == 0,0,ifelse(as.numeric(listTpfeedbackscoreDMs[[2]]) < 0,1,-1)) # Response#
      dataOneSubj[curRow,10] = listPuFBTe[[2]] # Retrieved feedback#
      dataOneSubj[curRow,11] = b #b#
      DMpulses = listTpfeedbackscoreDMs[[4]]#
      DMfeedback = listTpfeedbackscoreDMs[[5]]#
      # cat('added to DM at',curTime,'\n')#
      curTime = curTime + ifelse(listTpfeedbackscoreDMs[[2]] == 0,1,2) # Time to read the feedback etc. after the trial#
      assign('curTime',curTime,.GlobalEnv)#
    }#
  }#
  colnames(dataOneSubj) = c("Tp","Feedback","Points","Block","Subject","curTime","Trialnr","lossAversion","Response","Retrieved Feedback","b")#
  assign('dataOneSubj',dataOneSubj,.GlobalEnv)#
  return(dataOneSubj)#
}#
#
Experiment = function(subjects,n,DMsettings) {#
  finalData = NULL#
  for(curSubj in 1:subjects) {#
    cat('Subject',curSubj,'\n')#
    finalData = rbind(finalData,runOneSubj(n,curSubj,DMsettings))#
  }#
  return(finalData)#
}#
#
allData = Experiment(35,50,DMsettings)#
#
allDataTable = as.data.table(allData)#
#
allDataTable[,rtchange := Tp-shift(Tp)]#
allDataTable[,prevFeedback := as.factor(shift(Response))]#
allDataTable[, block := as.factor(Block)]#
#
allDataTable[,mean(rtchange),by=prevFeedback]#
#
plotdat = allDataTable[,list(mTp=mean(Tp)),by=list(Trialnr,Block)]#
plotdat[,plot(Trialnr,mTp,type="l",ylim=c(700,950),xlab="trial",ylab="estimation time",main="Estimation times",col='lightgreen')]#
#
for (i in 1:4) {#
  plotdat[Block==i,lines(Trialnr,lowess(mTp)$y,lwd=2,col='darkgreen')]#
}#
#
## Real data#
load("alldata.Rdat")#
data[,rt := response_time]#
data = data[rt <= 2000 & rt > 200]#
data[,trialnr := as.numeric(count_new_logger)+1]#
data[,trialnrBlock := live_row+1]#
data[,correct := ifelse(response_time > 750*0.85 & response_time < 750 * 1.15,1,0)]#
data[,resp := ifelse(response_time < 750*0.85, -1, ifelse(response_time > 750 * 1.15,1,0))]#
data[,block_fac := as.factor(trunc((trialnr-1) / 50)+1)]#
data[,block := trunc((trialnr-1) / 50)+1]#
data[,subj := as.factor(subject_nr)]#
data[,curPoints := curPoints] ## just for documentation purposes#
data[,totPoints := totalPoints]#
data[,rtchange := rt-shift(rt)]#
data[,prevFeedback_fac := as.factor(shift(resp))]#
data[,prevFeedback := shift(resp)]#
#
realData <- data[rt <= 2000 & rt > 200, list(mRT=mean(rt), #
                                             sdRT=sd(rt),#
                                             mScore=mean(totPoints), #
                                             mCurPoints=mean(curPoints),#
                                             mCorrect=mean(correct),#
                                             mResp=mean(resp)), by=.(trialnr,block)]#
setkey(realData,trialnr)#
realData[,lines(trialnr,mRT,type="l",ylim=c(600,950),xlab="trial",ylab="Estimation time",main="Estimation times",col='darkgray')]#
for (i in 1:4) {#
  realData[block==i,lines(trialnr,lowess(mRT)$y,lwd=2,col="black")]#
}#
#
realData[,t.test(mRT[block==1],mRT[block==4])]#
realData[,.(mean(mRT),sd(mRT)),by=block]#
realData[,anova(lm(mRT~block))]#
#
##Add legend#
legend('topleft', c("Model" ,"RealData"), lty=1, col=c('darkgreen', 'black'), bty='n',lwd=3)#
## Plotting#
plot.ablines <- function() {#
  abline(h=750)#
  abline(h=750*1.15,lty=3)#
  abline(h=750*0.85,lty=3,col="black")#
  abline(v=50.5,lty=3)#
  abline(v=100.5,lty=3)#
  abline(v=150.5,lty=3)#
}#
#
plot.ablines()
### Lecture about ANOVA#
#
### This is the most important statistic you will need to know!#
### 80% of all statistics in psychology papers use Anova#
#
### What is the goal?#
### We have run an experiment with several conditions#
### The experiments gives us mean results, but are they significant?#
### Simpel case: two means --> Use t-test#
### More means: Use Anova#
### Even more complex: Use linear mixed-effect models. You will learn about those in the Master#
#
library(Hmisc)#
se <- function(X) {#
  sd(X,na.rm=TRUE)/sqrt(length(X[!is.na(X)]))#
}#
#
### Let us generate some data#
#
girls <- rnorm(20,mean=1.5,sd=.1)#
boys <- rnorm(20,mean=1.6,sd=.1)
girls
boys
t.test(girls,boys)
temp <- rnorm(20,mean=1.5,sd=.1)#
temp <- data.frame("boy","nine",temp)#
names(temp) <- c("gender","age","length")#
data <- temp#
temp <- rnorm(20,mean=1.6,sd=.1)#
temp <- data.frame("boy","twelve",temp)#
names(temp) <- c("gender","age","length")#
data <- rbind(data,temp)#
temp <- rnorm(20,mean=1.45,sd=.1)#
temp <- data.frame("girl","nine",temp)#
names(temp) <- c("gender","age","length")#
data <- rbind(data,temp)#
temp <- rnorm(20,mean=1.65,sd=.1)#
temp <- data.frame("girl","twelve",temp)#
names(temp) <- c("gender","age","length")#
data <- rbind(data,temp)
data
interaction.plot(data$age,data$gender,data$length)#
with(data,tapply(length,list(gender,age),mean))
temp <- rnorm(20,mean=1.5,sd=.1)#
temp <- data.frame("boy","nine",temp)#
names(temp) <- c("gender","age","length")#
data <- temp#
temp <- rnorm(20,mean=1.6,sd=.1)#
temp <- data.frame("boy","twelve",temp)#
names(temp) <- c("gender","age","length")#
data <- rbind(data,temp)#
temp <- rnorm(20,mean=1.45,sd=.1)#
temp <- data.frame("girl","nine",temp)#
names(temp) <- c("gender","age","length")#
data <- rbind(data,temp)#
temp <- rnorm(20,mean=1.65,sd=.1)#
temp <- data.frame("girl","twelve",temp)#
names(temp) <- c("gender","age","length")#
data <- rbind(data,temp)#
#
interaction.plot(data$age,data$gender,data$length)#
with(data,tapply(length,list(gender,age),mean))
summary(aov(length ~ gender*age, data=data))
temp <- rnorm(20,mean=1.5,sd=.1)#
temp <- data.frame("boy","nine",temp)#
names(temp) <- c("gender","age","length")#
data <- temp#
temp <- rnorm(20,mean=1.6,sd=.1)#
temp <- data.frame("boy","twelve",temp)#
names(temp) <- c("gender","age","length")#
data <- rbind(data,temp)#
temp <- rnorm(20,mean=1.45,sd=.1)#
temp <- data.frame("girl","nine",temp)#
names(temp) <- c("gender","age","length")#
data <- rbind(data,temp)#
temp <- rnorm(20,mean=1.65,sd=.1)#
temp <- data.frame("girl","twelve",temp)#
names(temp) <- c("gender","age","length")#
data <- rbind(data,temp)#
#
interaction.plot(data$age,data$gender,data$length)#
with(data,tapply(length,list(gender,age),mean))#
#
### We can again use t-test to compare all the means, but is that useful?#
### Better: check the effects of age, of gender, and the interaction#
### Two-way Anova#
#
summary(aov(length ~ gender*age, data=data))
dat <- read.table("taskswitchstrooptransfer.dat")#
names(dat) <- c("Run","Task","Label","Trial","Time","Event","Par1","Par2","Par3","inp1","inp2","inp3","inp4","inp5")#
#
dat <- dat[dat$Task=="stroop" & ((dat$Par1=="stim" & dat$Par2=="void") | dat$Event=="trial-end"),]#
dat$RT <- dat$Time - 1.0#
dat <- dat[dat$Event == "trial-end",]#
#
res <- with(dat,tapply(RT,list(inp2,Label),mean))#
#
res
