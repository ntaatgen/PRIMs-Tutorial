// More general version of count

define task count {
  initial-skills: (iterate-one)
  default-activation: 1.0 // All chunks defined in this model receive a fixed baselevel activation of 1.0
  ol: t
  rt: -2.0
  lf: 0.2
  default-operator-self-assoc: 0.0
  egs: 0.05
  retrieval-reinforces: t
}


define skill iterate {
//  Start iteration
  operator start-iteration {
   V1 <> nil  // There has to be a visual input with the starting number
   WM1 = nil  // Imaginal should be empty
  ==>
   V1 -> WM1 
   *fact-type -> RT1 
   V1 -> RT2
   *action -> AC1 
   V1 -> AC2
   }

//    Iterate as long V2 does not match the final goal
  operator iterate {
    RT2 = WM1
    V2 <> WM1
   ==>
    RT3 -> WM1
    *fact-type -> RT1
    RT3 -> RT2
    *action -> AC1
    RT3 ->AC2
  }

//    Stop when reaching final match
  operator final {
    V2 = WM1
   ==>
    *final-action -> AC1
    *final-response -> AC2
    nil -> G1
  }

// If the iteration fails, do the final-action on final-response-negative
  operator final-fail {
  	V2 <> WM1
  	RT1 = error
  	==>
  	*final-action -> AC1
  	*final-response-negative -> AC2
	}
}

define facts {
    (cf1 count-fact  one  two)
    (cf2 count-fact  two  three)
    (cf3 count-fact  three  four)
    (cf4 count-fact  four  five)
    (cf5 count-fact  five  six)
    (cf6 count-fact six seven)
    (cf7 count-fact seven eight)
    (cf8 count-fact eight nine)
    (cg9 count-fact nine ten)
}

define action say {
  latency: 0.3
  noise: 0.1
  distribution: uniform
  output: Saying
}

define script {
	instantiate-skill("iterate", "iterate-one", ["fact-type", "count-fact"],["action", "say"], ["final-action", "say"], ["final-response", "stop"])
    digits = ["one","two","three","four","five","six","seven",
        "eight","nine","ten"]
    start = random(3)
    end = start + 1 + random(3)
    print("Counting from",digits[start],"to",digits[end])
    screen(digits[start],digits[end])
    run-until-action("say","stop")
    issue-reward()
    trial-end()
}
