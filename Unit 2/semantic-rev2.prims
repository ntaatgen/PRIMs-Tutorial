// Simple semantic model
//
// Make sure to load count-rev2.prims first 

define task semantic {
    initial-skills: (read)
    ol: t
    rt: -2.0
    lf: 0.2
    default-operator-self-assoc: 0.0
    default-activation: 1.0
}

define skill alt-respond {
	operator carry-out-action {
		G1 <> nil // Operators require at least one condition
		==>
		*alt-respond-action -> AC1
		*alt-respond-arg -> AC2
		nil -> G1
	}
}

define action subvocalize {
    latency: 0.2
    noise: 0.08
    distribution: uniform
    output: Subvocalizing
}

define action say {
    latency: 0.3
    noise: 0.1
    distribution: uniform
    output: Saying
}

define facts {

    (sem1  property  lion  mammal)
    (sem2  property  mammal  animal)
    (sem3  property  animal living-thing)
    (sem4  property  plant living-thing)
    (sem5  property  tulip plant)
    (sem6  property  bird animal)
    (sem7  property  tweety bird)
    (sem8  property  robin bird)

}


define script {
	add-binding("next-skill","iterate")
	add-binding("action","sub-vocalize")
	add-binding("fact-type","property")
	add-binding("final-action-skill","respond")
	add-binding("fail-skill","alt-respond")
	add-binding("respond-action","say")
	add-binding("respond-arg","yes")
	add-binding("alt-respond-action","say")
	add-binding("alt-respond-arg","no")

    pairs = [["lion","living-thing","yes"],["tulip","animal","no"],["mammal","living-thing","yes"],["lion","plant","no"]]
    pairno = random(length(pairs))
    pair = pairs[pairno]
    print("Is",pair[0],"a",pair[1],"?")
    screen(pair[0],pair[1])
    run-until-action("say")
    issue-reward()
    trial-end()
}


