// Simple semantic model
//
// Make sure to load count-rev2.prims first 

define task semantic {
    initial-skills: (read-one)
    ol: t
    rt: -2.0
    lf: 0.2
    default-operator-self-assoc: 0.0
    default-activation: 1.0
}


define action subvocalize {
    latency: 0.2
    noise: 0.08
    distribution: uniform
    output: Subvocalizing
}

define action say {
    latency: 0.3
    noise: 0.1
    distribution: uniform
    output: Saying
}

define facts {

    (sem1  property  lion  mammal)
    (sem2  property  mammal  animal)
    (sem3  property  animal living-thing)
    (sem4  property  plant living-thing)
    (sem5  property  tulip plant)
    (sem6  property  bird animal)
    (sem7  property  tweety bird)
    (sem8  property  robin bird)

}


define script {
	instantiate-skill("read", "read-one", ["next-skill","iterate-one"])
	instantiate-skill("iterate", "iterate-one", ["fact-type", "property"],["action", "sub-vocalize"], ["final-action-skill", "respond-yes"],["fail-skill", "respond-no"])
	instantiate-skill("respond","respond-yes", ["action","say"], ["arg","yes"])
	instantiate-skill("respond","respond-no", ["action", "say"], ["arg","no"])

    pairs = [["lion","living-thing","yes"],["tulip","animal","no"],["mammal","living-thing","yes"],["lion","plant","no"]]
    pairno = random(length(pairs))
    pair = pairs[pairno]
    print("Is",pair[0],"a",pair[1],"?")
    screen(pair[0],pair[1])
    run-until-action("say")
    issue-reward()
    trial-end()
}


