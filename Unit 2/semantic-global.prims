// This version of semantic uses all global constants so that operators can be transfered more easily to counting


define task semantic-global {
initial-goals: (semantic)
default-activation: 1.0
ol: t
rt: -2.0
lf: 0.2
default-operator-self-assoc: 0.0
references: (fact-type action final-action final-response final-response-negative)
}

define goal semantic {
operator start-semantic {
"Start semantic reasoning"
V1 <> nil
WM1 = nil
==>
V1 -> WM1
fact-type -> RT1
V1 -> RT2
action -> AC1
V1 -> AC2
}

operator move-up-tree {
"Move up the tree"
RT2 = WM1
V2 <> WM1
==>
RT3 -> WM1
fact-type -> RT1
RT3 -> RT2
action -> AC1
RT3 -> AC2
}

operator say-yes {
"Say yes when found"
V2 = WM1
==>
final-action -> AC1
final-response -> AC2
nil -> G1
}

operator say-no {
"Say no on retrieval failure"
V2 <> WM1
RT1 = error
==>
final-action -> AC1
final-response-negative -> AC2
nil -> G1
}
}

define action subvocalize {
    latency: 0.2
    noise: 0.08
    distribution: uniform
    output: Subvocalizing
}

define action say {
    latency: 0.3
    noise: 0.1
    distribution: uniform
    output: Saying
}


define facts {

    (sem1  property  lion  mammal)
    (sem2  property  mammal  animal)
    (sem3  property  animal living-thing)
    (sem4  property  plant living-thing)
    (sem5  property  tulip plant)
    (sem6  property  bird animal)
    (sem7  property  tweety bird)
    (sem8  property  robin bird)

}


define script {
	set-goal("semantic",["fact-type","property"],["action","sub-vocalize"],["final-action","say"], ["final-reponse","yes"],["final-response-negative","no"])
    pairs = [["lion","living-thing","yes"],["tulip","animal","no"],["mammal","living-thing","yes"],["lion","plant","no"]]
    pairno = random(length(pairs))
    pair = pairs[pairno]
    print("Is",pair[0],"a",pair[1],"?")
    screen(pair[0],pair[1])
    run-until-action("say")
    issue-reward()
    trial-end()
}


