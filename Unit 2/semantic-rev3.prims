// Semantic, but now with also answers questions about attributes

define task semantic {
  initial-skills: (read-one)
  default-activation: 1.0 
  ol: t
  rt: -2.0
  lf: 0.2
  egs: 0.05
  retrieval-reinforces: t
}

define skill read {
	operator read-for-two-items {
		V1 <> nil
		V2 <> nil
		WM1 = nil
	==>
		V1 -> WM1
		V2 -> WM2
	}
	operator switch-to-next-skill {
		V1 = WM1
	==>
		*next-skill -> G1
	}
}

define skill iterate {
//  Start iteration
  operator start-iteration {
   WM3 = nil  // Slot we use for iterator is empty
  ==>
   WM1 -> WM3	
   *sub-skill -> G1
   }

  operator do-sub-skill {
   RT1 = *fact-type
   ==>
   RT3 -> WM3
   *sub-skill -> G1
  }

//    Iterate as long WM2 does not match the final goal
  operator retrieve-next {
    RT1 = nil
    WM3 <> nil
    WM2 <> WM3
   ==>
    *fact-type -> RT1
    WM3 -> RT2
  }

//    Stop when reaching final match
  operator final {
    WM2 = WM3
    RT1 = nil
   ==>
    *final-action-skill -> G1
  }

// If the iteration fails, do the final-action on final-response-negative
  operator final-fail {
  	WM2 <> WM3
  	RT1 = error
  	==>
  	*fail-skill -> G1
	}
}

define skill attempt-retrieve {
	operator start-retrieve {
		WM2 <> nil
		WM3 <> nil
		RT1 = nil
	==>
		*fact-type -> RT1
		WM3 -> RT2
		WM2 -> RT3
	}
	
	operator on-success {
		RT1 = *fact-type
	==>
		*success-skill -> G1
	}
	
	operator on-fail {
		RT1 = error
	==>
		*fail-skill -> G1
	}
}


define skill respond {
	operator carry-out-action {
		G1 <> nil // Operators require at least one condition
		==>
		*action -> AC1
		*arg -> AC2
		nil -> G1
	}
}


define action say {
  latency: 0.3
  noise: 0.1
  distribution: uniform
  output: Saying
}

define facts {

    (sem1  property  lion  mammal)
    (sem2  property  mammal  animal)
    (sem3  property  animal living-thing)
    (sem4  property  plant living-thing)
    (sem5  property  tulip plant)
    (sem6  property  bird animal)
    (sem7  property  tweety bird)
    (sem8  property  robin bird)
	(sem11 has-attribute bird flies)
	(sem12 has-attribute living-thing cells)
	(sem13 has-attribute tulip flower)
	(sem14 has-attribute bird eggs)
	(sem15 has-attribute animal blood)
	(sem16 has-attribute plant roots)
}


define script {
	instantiate-skill("read", "read-one", ["next-skill","iterate-one"])
// Instantiate the rest of the skills here

    pairs = [["lion","flies","no"], ["robin","flies","yes"], ["mammal","cells","yes"], ["plant","roots","yes"], ["lion","living-thing","yes"], ["tulip","animal","no"], ["mammal","living-thing","yes"], ["lion","plant","no"]]
    pairno = random(length(pairs))
    pair = pairs[pairno]
    print("Has",pair[0],"the attribute",pair[1],"?")
    screen(pair[0],pair[1])
    run-until-action("say")
    issue-reward()
    trial-end()
}


