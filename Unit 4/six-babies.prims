// Which mother bird has six babies?
//

define task six-babies {
    initial-goals: (find-value count-goal include-all)
    goals: (count-goal include-all)
    imaginal-autoclear: nil
    rt: -2.0
    lf: 0.3
    ans: 0.1
    default-activation: 1.0
    references: (container item-type subtask subsubtask action target-value subtask-type)
}

define facts {
    (zero number-fact 0)
    (one number-fact 1)
    (two number-fact 2)
    (three number-fact 3)
    (four number-fact 4)
    (five number-fact 5)
    (six number-fact 6)
    (cf0 count-fact zero one)
    (cf1 count-fact  one  two)
    (cf2 count-fact  two  three)
    (cf3  count-fact  three  four)
    (cf4  count-fact  four  five)
    (cf5  count-fact  five  six)
    (adf1 addition-fact one zero one)
    (adf2 addition-fact two one three)
}

define goal find-value {
    operator init-find-value {
        WM1=nil
        V1=screen
        ==>
        >>V3  // shift to the first container (bird)
        find-target -> WM1
        >>WM4 // this creates a new chunk that is placed in WM4, and shifts focus to that chunk
        subtask-type -> WM1
        push-goal -> AC1
        subtask -> AC2
    }

    operator result-is-target {
        WM1 = find-target
        >>WM4
        WM2 = target-value
        WM<<
    ==>
		action -> AC1
		V0 -> AC2
    }
	
	operator result-is-not-target-move-next {
        WM1 = find-target
        >>WM4
        WM2 <> target-value 
        WM<<
        V2 <> nil // there is a next 
    ==>
    	>>V2
    	nil -> WM4
    	>>WM4
        subtask-type -> WM1
        push-goal -> AC1
        subtask -> AC2
	}
	
	operator result-is-not-target-all-done {
        WM1 = find-target
        >>WM4
        WM2 <> target-value 
        WM<<
        V2 = nil // there is no next 
	==>
		action -> AC1
		stop -> AC2
	}	
}



define goal count-goal {
    operator init-countgoal {
        WM1 = total-count
        WM3 = nil
        V1 = container
        ==>
        zero -> WM3
        >>V3 // shift to first item
        >>WM4 // Determine whether this is something that we need to count
        member -> WM1
        push-goal -> AC1
        subsubtask -> AC2
    }

    operator move-one-if-not-countable-and-not-last {
        WM1 = total-count
        >>WM4
        WM2 = no
        WM<<
        V2 <> nil
        ==>
        >>V2 // shift to next item
        nil -> WM4
        >>WM4
        member -> WM1
        push-goal -> AC1
        subsubtask -> AC2
    }

    operator move-one-if-not-countable-and-last {
        WM1 = total-count
        >>WM4
        WM2 = no
        WM<<
        V2 = nil
        ==>
        WM3 -> WM2
        WM<<  // Shift up back to whoever wanted to count
        V<<  // Shift up back to container
        remove-goal -> AC1
    }

    operator retrieve-count-fact-for-countable-item {
        WM1 = total-count
        >>WM4
        WM2 = yes
        WM<<
    ==>
        count-fact -> RT1
        WM3 -> RT2
        nil -> WM4
    }

    operator add-count-and-not-last {
        RT1 = count-fact
        V2 <> nil
    ==>
        >>V2 // shift to next item
        RT3 -> WM3
        >>WM4
        member -> WM1
        push-goal -> AC1
        subsubtask -> AC2
    }

    operator add-count-last {
        RT1 = count-fact
        V2 = nil
    ==>
        RT3 -> WM2
        WM<<
        V<<
        remove-goal -> AC1
    }
}

define goal include-all {

    operator answer-yes-always {
        WM1 = member
    ==>
        yes -> WM2
        WM<<
        remove-goal -> AC1
    }
}

define visual {
    (screen1 screen nil chicken)
    (chicken bird duck chick1)
    (duck bird nil chick7)
    (chick1 chick chick2)
    (chick2 chick chick3)
    (chick3 chick chick4)
    (chick4 chick chick5)
    (chick5 chick chick6)
    (chick6 chick nil)
    (chick7 chick chick8)
    (chick8 chick chick9)
    (chick9 chick chick10)
    (chick10 chick nil)
}


define script {
    screen("screen1")
    set-goal("find-value",["subtask","count-goal"],["action","say"],["target-value","six"],["container","bird"],["subtask-type","total-count"])
    set-goal("count-goal",["item-type","chick"],["subsubtask","include-all"])
    run-until-action("say")
    issue-reward()
    trial-end()
}
