// Which acquarium has more fish?
//

define task more-fish {
    initial-goals: (more count-goal determine-attribute)
    goals: (count-goal determine-attribute)
    rt: -2.0
    lf: 0.3
    ans: 0.1
    default-activation: 1.0
    references: (container item-type subtask subsubtask action target)
}

define facts {
    (zero number-fact 0)
    (one number-fact 1)
    (two number-fact 2)
    (three number-fact 3)
    (four number-fact 4)
    (five number-fact 5)
    (six number-fact 6)
    (cf0 count-fact zero one)
    (cf1 count-fact  one  two)
    (cf2 count-fact  two  three)
    (cf3  count-fact  three  four)
    (cf4  count-fact  four  five)
    (cf5  count-fact  five  six)
    (gt1 greaterthan three zero yes)
    (gt2 greaterthan two three no)
}

define goal more {
    operator init-find-most {
        WM1 = nil
        V1=screen
        ==>
        >>V3
        most -> WM1
        zero -> WM5 // current most
        >>WM4
        total-count -> WM1
        push-goal -> AC1
        subtask -> AC2
    }

    operator compare-total-retrieve {
        WM1 = most
        RT1 = nil
        >>WM4
        WM2 <> nil
    ==>
        greaterthan -> RT1
        WM2 -> RT2
        WM<<
        WM5 -> RT3
        nil -> WM4
    }

    operator new-container-is-greater-move-on {
        WM1 = most
        RT1 = greaterthan
        RT4 = yes
        V2 <> nil
    ==>
        RT2 -> WM5
        V0 -> WM3
        >>V2
        >>WM4
        total-count -> WM1
        push-goal -> AC1
        subtask -> AC2
    }

    operator new-container-is-not-greater-move-on {
        WM1 = most
        RT1 = greaterthan
        RT4 = no
        V2 <> nil
        ==>
        >>V2
        >>WM4
        total-count -> WM1
        push-goal -> AC1
        subtask -> AC2
    }
    operator new-container-is-greater-last {
        WM1 = most
        RT1 = greaterthan
        RT4 = yes
        V2 = nil
        ==>
        V0 -> WM2
    }
    operator new-container-is-not-greater-last {
        WM1 = most
        RT1 = greaterthan
        RT4 = no
        V2 = nil
        ==>
        WM3 -> WM2
    }

    operator report-result {
        WM1 = most
        WM2 <> nil
        ==>
        action -> AC1
        WM2 -> AC2
        nil->G1  // We want to replace this with nil->G eventually
    }

}

define goal count-goal {
    operator init-countgoal {
        WM1 = total-count
        WM3 = nil
        V1 = container
        ==>
        zero -> WM3
        >>V3 // shift to first item
        >>WM4 // Determine whether this is something that we need to count
        member -> WM1
        push-goal -> AC1
        subsubtask -> AC2
    }

    operator move-one-if-not-countable-and-not-last {
        WM1 = total-count
        >>WM4
        WM2 = no
        WM<<
        V2 <> nil
        ==>
        >>V2 // shift to next item
        nil -> WM4
        >>WM4
        member -> WM1
        push-goal -> AC1
        subsubtask -> AC2
    }

    operator move-one-if-not-countable-and-last {
        WM1 = total-count
        >>WM4
        WM2 = no
        WM<<
        V2 = nil
        ==>
        WM3 -> WM2
        WM<<  // Shift up back to whoever wanted to count
        V<<  // Shift up back to container
        remove-goal -> AC1
    }

    operator retrieve-count-fact-for-countable-item {
        WM1 = total-count
        >>WM4
        WM2 = yes
        WM<<
    ==>
        count-fact -> RT1
        WM3 -> RT2
        nil -> WM4
    }

    operator add-count-and-not-last {
        RT1 = count-fact
        V2 <> nil
    ==>
        >>V2 // shift to next item
        RT3 -> WM3
        >>WM4
        member -> WM1
        push-goal -> AC1
        subsubtask -> AC2
    }

    operator add-count-last {
        RT1 = count-fact
        V2 = nil
    ==>
        RT3 -> WM2
        WM<<
        V<<
        remove-goal -> AC1
    }
}

define goal determine-attribute {

operator answer-yes {
    WM1 = member
    V1 = item-type
    V4 = target
    ==>
    yes -> WM2
    WM<<
    remove-goal -> AC1
}

operator answer-no {
    WM1 = member
    V1 = item-type
    V4 <> target
    ==>
    no -> WM2
    WM<<
    remove-goal -> AC1
}

}


define visual {
    (screen2 screen nil acquarium1)
    (acquarium1 acquarium acquarium2 fish1)
    (fish1 fish fish2 nil red)
    (fish2 fish fish3 nil red)
    (fish3 fish fish4 nil blue)
    (fish4 fish nil nil red)
    (acquarium2 acquarium nil fish5)
    (fish5 fish fish6 nil red)
    (fish6 fish fish7 nil green)
    (fish7 fish fish8 nil blue)
    (fish8 fish nil nil red)
}


define script {
    screen("screen2")
    set-goal("more",["subtask","count-goal"],["action","say"],["container","acquarium"])
    set-goal("count-goal",["item-type","fish"],["subsubtask","determine-attribute"])
    set-goal("determine-attribute",["target","red"])
	run-until-action("say")
	issue-reward()
	trial-end()
}


