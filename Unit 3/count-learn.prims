// This is a model that has to learn counting based on operators borrowed from other tasks
// More in particular, it can borrow all it needs from semantic

define task count-learn {
    initial-skills: (count-learn)
    default-activation: 1.0
    ol: t
    rt: -2.0
    lf: 0.2
    default-operator-self-assoc: 0.0
    skill-operator-learning: t
//	context-operator-learning: t
    reward: 10.0
    beta: 0.1
}

define facts {
    (cf1 count-fact  one  two)
    (cf2 count-fact  two  three)
    (cf3 count-fact  three  four)
    (cf4 count-fact  four  five)
    (cf5 count-fact  five  six)
    (cf6 count-fact six seven)
    (cf7 count-fact seven eight)
    (cf8 count-fact eight nine)
    (cg9 count-fact nine ten)
}

define action say {
  latency: 0.3
  noise: 0.1
  distribution: uniform
  output: Saying
}


define script {
	set-graph-title("Accuracy") // We want to plot accuracy instead of latency
	set-average-window(10)	// Accuracy is just 0's and 1's, so we want to smooth a bit.
	add-binding("fact-type","count-fact")
	add-binding("action","say")
	add-binding("final-action","respond")
	add-binding("final-response","stop")
    digits = ["one","two","three","four","five","six","seven",
        "eight","nine","ten"]
    start = random(3)
    end = start + 1 + random(3)
    print("Counting from",digits[start],"to",digits[end])
    screen(digits[start],digits[end])
    run-relative-time-or-action(10,"respond")
    ac = last-action()
    if (ac[0] == "respond") {
    	plot-point(1)
    	issue-reward()
    } else {
    	plot-point(0)
    	issue-reward(0)
	}
    trial-end()
}
